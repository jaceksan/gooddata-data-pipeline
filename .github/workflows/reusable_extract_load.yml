on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
      DB_OVERRIDE:
        required: false
        type: string
        default: ""
      FULL_REFRESH:
        required: true
        type: string
        default: "false"
      MELTANO_CUSTOM_IMAGE:
        required: true
        type: string
      BRANCH_NAME:
        type: string

jobs:
  reusable_extract_load:
    name: extract-load
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}
    container: ${{ inputs.MELTANO_CUSTOM_IMAGE }}
    strategy:
      matrix:
        source: [github, faa, ecommerce_demo, data_science, jira]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.BRANCH_NAME }}

      - name: Setup Environment
        shell: bash
        run: |
          source .env.${{ inputs.ENVIRONMENT }} ${{ inputs.DB_OVERRIDE }}
          cd $SRC_DATA_PIPELINE
          ln -s $IMAGES_WORKDIR/.meltano .meltano

      - name: Run Extract and Load
        shell: bash
        timeout-minutes: 30
        env:
          FR: ${{ inputs.FULL_REFRESH == 'true' && '--full-refresh' || '' }}
          DB_PASS: "${{ secrets.DB_PASS }}"
          MELTANO_STATE_AWS_ACCESS_KEY_ID: "${{ secrets.MELTANO_STATE_AWS_ACCESS_KEY_ID }}"
          MELTANO_STATE_AWS_SECRET_ACCESS_KEY: "${{ secrets.MELTANO_STATE_AWS_SECRET_ACCESS_KEY }}"
          TAP_GITHUB_AUTH_TOKEN: "${{ secrets.TAP_GITHUB_AUTH_TOKEN }}"
          TAP_JIRA_EMAIL: "${{ secrets.TAP_JIRA_EMAIL }}"
          TAP_JIRA_API_TOKEN: "${{ secrets.TAP_JIRA_API_TOKEN }}"
          MOTHERDUCK_TOKEN: "${{ secrets.MOTHERDUCK_TOKEN }}"
        run: |
          source .env.${{ inputs.ENVIRONMENT }} ${{ inputs.DB_OVERRIDE }}
          make extract_load_${{ matrix.source }}
